#!/bin/sh
set -e

FIRE_BASE_INSTANCE_FILE="${FIRE_CACHE_DIR}/instance_data"
FIRE_BASE_VPC_FILE="${FIRE_CACHE_DIR}/vpc_data"
FIRE_BASE_SUBNET_FILE="${FIRE_CACHE_DIR}/subnet_data"
FIRE_BASE_KEY_PAIR_FILE="${FIRE_CACHE_DIR}/key_pair_data"
FIRE_BASE_SECURITY_GROUP_FILE="${FIRE_CACHE_DIR}/security_group_data"
FIRE_BASE_INTERNET_GATEWAY_FILE="${FIRE_CACHE_DIR}/internet_gateway_data"
FIRE_BASE_ROUTE_TABLE_FILE="${FIRE_CACHE_DIR}/route_table_data"

fire_error() {
  echo "$1" >>"${FIRE_CACHE_DIR}/error"
}

aws_exec() {
  aws --region "$FIRE_REGION" "$@"
}

clear_base_security_group_information() {
  rm -f "$FIRE_BASE_SECURITY_GROUP_FILE"
}

request_base_security_group_information() {
  aws_exec ec2 describe-security-groups \
    --filter "Name=tag:${FIRE_PROJECT}:${FIRE_PROGRAM_NAME}-role,Values=base" \
             "Name=tag:${FIRE_PROJECT}:${FIRE_PROGRAM_NAME}-environment,Values=${FIRE_ENVIRONMENT}" \
             "Name=vpc-id,Values=$(get_vpc_info vpc_id)" \
    --query "SecurityGroups[].GroupId" --output text
}

retrieve_base_security_group_information() {
  if [ ! -f "$FIRE_BASE_SECURITY_GROUP_FILE" ]; then
    request_base_security_group_information > "${FIRE_BASE_SECURITY_GROUP_FILE}"
  fi
  cat "${FIRE_BASE_SECURITY_GROUP_FILE}"
}

get_security_group_info() {
  case "$1" in
    "group_id" )
      retrieve_base_security_group_information
      ;;
  esac
}

clear_base_key_pair_information() {
  rm -f "$FIRE_BASE_KEY_PAIR_FILE"
}

request_key_pair_information() {
  aws_exec ec2 describe-key-pairs \
    --filter "Name=tag:${FIRE_PROJECT}:${FIRE_PROGRAM_NAME}-role,Values=base" \
    --query "KeyPairs[].KeyName" --output text
}

retrieve_key_pair_information() {
  if [ ! -f "$FIRE_BASE_KEY_PAIR_FILE" ]; then
    request_key_pair_information > "${FIRE_BASE_KEY_PAIR_FILE}"
  fi
  cat "${FIRE_BASE_KEY_PAIR_FILE}"
}

get_key_pair_info() {
  case "$1" in
    "key_name" )
      retrieve_key_pair_information
      ;;
  esac
}

clear_base_instance_information() {
  rm -f "$FIRE_BASE_INSTANCE_FILE"
}

request_base_instance_information() {
  aws_exec ec2 describe-instances \
    --filter "Name=tag:${FIRE_PROJECT}:${FIRE_PROGRAM_NAME}-role,Values=base"\
             "Name=instance-state-name,Values=pending,running"\
    --query "Reservations[].Instances[].
      {
        InstanceId: InstanceId,
        VpcId: VpcId,
        PublicIp: (NetworkInterfaces[].Association.PublicIp | @[0]),
        State: State.Name
      } | @[0]"
}

retrieve_base_instance_information() {
  if [ ! -f "$FIRE_BASE_INSTANCE_FILE" ]; then
    request_base_instance_information > "${FIRE_BASE_INSTANCE_FILE}"
  fi
  cat "${FIRE_BASE_INSTANCE_FILE}"
}

get_base_instance_info() {
  INSTANCE_DATA="$(retrieve_base_instance_information)"
  if [ "$INSTANCE_DATA" = "null" ]; then
    return
  fi
  case "$1" in
    "instance_id" )
      echo "$INSTANCE_DATA" | jp -u "InstanceId"
      ;;
    "vpc_id" )
      echo "$INSTANCE_DATA" | jp -u "VpcId"
      ;;
    "public_ip" )
      echo "$INSTANCE_DATA" | jp -u "PublicIp"
      ;;
    "state" )
      echo "$INSTANCE_DATA" | jp -u "State"
      ;;
  esac
}

clear_vpc_information() {
  rm -f "$FIRE_BASE_VPC_FILE"
}

request_vpc_information() {
  aws_exec ec2 describe-vpcs \
    --filter "Name=\"tag:${FIRE_PROJECT}:${FIRE_PROGRAM_NAME}-environment\",
              Values=${FIRE_ENVIRONMENT}"\
    --query "Vpcs[].[VpcId, State]" --output text
}

retrieve_vpc_information() {
  if [ ! -f "$FIRE_BASE_VPC_FILE" ]; then
    request_vpc_information > "${FIRE_BASE_VPC_FILE}"
  fi
  cat "${FIRE_BASE_VPC_FILE}"
}

get_vpc_info() {
  case "$1" in
    "vpc_id" )
      retrieve_vpc_information  | cut -f1
      ;;
    "state" )
      retrieve_vpc_information  | cut -f2
      ;;
  esac
}

clear_subnet_information() {
  rm -f "$FIRE_BASE_SUBNET_FILE"
}

request_subnet_information() {
  aws_exec ec2 describe-subnets \
    --filter "Name=vpc-id,Values=\"$(get_vpc_info vpc_id)\""\
    --query "Subnets[].[SubnetId, State]" --output text
}

retrieve_subnet_information() {
  if [ ! -f "$FIRE_BASE_SUBNET_FILE" ]; then
    request_subnet_information > "$FIRE_BASE_SUBNET_FILE"
  fi
  cat "$FIRE_BASE_SUBNET_FILE"
}

get_subnet_info() {
  case "$1" in
    "subnet_id" )
      retrieve_subnet_information | cut -f1
      ;;
    "state" )
      retrieve_subnet_information | cut -f2
      ;;
  esac
}

clear_internet_gateway_information() {
  rm -f "$FIRE_BASE_INTERNET_GATEWAY_FILE"
}

request_internet_gateway_information() {
  aws_exec ec2 describe-internet-gateways \
    --filter "Name=attachment.vpc-id,Values=\"$(get_vpc_info vpc_id)\""\
    --query "InternetGateways[].InternetGatewayId" --output text
}

retrieve_internet_gateway_information() {
  if [ ! -f "$FIRE_BASE_INTERNET_GATEWAY_FILE" ]; then
    request_internet_gateway_information > "$FIRE_BASE_INTERNET_GATEWAY_FILE"
  fi
  cat "$FIRE_BASE_INTERNET_GATEWAY_FILE"
}

get_internet_gateway_info() {
  case "$1" in
    "internet_gateway_id" )
      retrieve_internet_gateway_information | cut -f1
      ;;
  esac
}

clear_route_table_information() {
  rm -f "$FIRE_BASE_ROUTE_TABLE_FILE"
}

request_route_table_information() {
  aws_exec ec2 describe-route-tables \
    --filter "Name=vpc-id,Values=$(get_vpc_info vpc_id)" \
             "Name=tag:${FIRE_PROJECT}:${FIRE_PROGRAM_NAME}-environment,Values=\"${FIRE_ENVIRONMENT}\"" \
    --query "RouteTables[].
        {
          table: @,
          association: (length(Associations[? Main == \`true\`]) == \`0\`)
        } | @[? association == \`true\`][].table.
        {
          RouteTableId: RouteTableId,
          Routes: Routes,
          AssociationIds: Associations[?! Main][].RouteTableAssociationId
        } | @[0]"
}

retrieve_route_table_information() {
  if [ ! -f "$FIRE_BASE_ROUTE_TABLE_FILE" ]; then
    request_route_table_information > "$FIRE_BASE_ROUTE_TABLE_FILE"
  fi
  cat "$FIRE_BASE_ROUTE_TABLE_FILE"
}

get_route_table_info() {
  ROUTE_DATA="$(retrieve_route_table_information)"
  if [ "$ROUTE_DATA" = "null" ]; then
    return
  fi
  case "$1" in
    "route_table_id" )
      echo "$ROUTE_DATA" | jp -u "RouteTableId"
      ;;
    "ipv4_cidr_blocks" )
      echo "$ROUTE_DATA" | jp -u "Routes[?starts_with(GatewayId, \`\"igw-\"\`)].DestinationCidrBlock | join(\`\"\\n\"\`, @)"
      ;;
    "ipv6_cidr_blocks" )
      echo "$ROUTE_DATA" | jp -u "Routes[?starts_with(GatewayId, \`\"igw-\"\`)].DestinationIpv6CidrBlock | join(\`\"\\n\"\`, @)"
      ;;
    "association_ids" )
      echo "$ROUTE_DATA" | jp -u "AssociationIds | join(\`\"\\n\"\`, @)"
      ;;
  esac
}
